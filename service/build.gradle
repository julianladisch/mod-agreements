configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    runtimeClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    annotationProcessor {
        resolutionStrategy.activateDependencyLocking()
    }
}

/* configurations.all {

  // Check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
*/

buildscript {
  repositories {
		//mavenLocal()
		mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://repo.grails.org/grails/core" }
		maven { url "https://repo.grails.org/grails/plugins" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "org.grails.plugins:hibernate5:$gormVersion"
    classpath "org.grails.plugins:views-gradle:3.1.2"
    classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
  }
}

final String version_regex = /^(((\d+)\.\d+)\.\d+)(-([a-zA-Z]+(\.\d+)?))?$/
Map<String, String> env = System.getenv();
String calculated_version = null;


// If we are building in a Jenkins environment append the build number onto the snapshot tag
if ( ( appVersion.contains('SNAPSHOT') ) && ( env.BUILD_NUMBER != null ) ) {
  println("Detected snapshot version and build number - appending");
  calculated_version = "${appVersion}.${env.BUILD_NUMBER}".toString()
}
else {
  println("Release version");
  calculated_version = "${appVersion}".toString()
}


version "${calculated_version}"
group 'org.olf'

apply plugin:"eclipse"
apply plugin:"idea"
//apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"
apply plugin: 'com.bmuschko.docker-remote-api'

sourceSets {
	main {
		resources {
			srcDir 'grails-app/migrations'
			srcDir 'src/main/okapi/tenant'
		}
	}
}

// https://github.com/grails/grails-core/issues/12181
bootJar {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

repositories {
//  mavenLocal()
	maven { url "https://repo.grails.org/grails/core" }
	maven { url "https://repo.grails.org/grails/plugins" }
	maven { url "https://jitpack.io" }
	maven { url 'https://maven.indexdata.com/' }
	maven { url "https://maven.k-int.com/repository/releases" }
	mavenCentral()
}

dependencies {
  /* Grails 6 */
  compileOnly("io.micronaut:micronaut-inject-groovy")
  console("org.grails:grails-console")
  profile "org.grails.profiles:rest-api"

  implementation("org.springframework.boot:spring-boot-autoconfigure")
  implementation("org.springframework.boot:spring-boot-starter")
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("org.springframework.boot:spring-boot-starter-logging")
  //implementation("org.springframework.boot:spring-boot-starter-tomcat")
  //implementation("org.springframework.boot:spring-boot-starter-validation")

  implementation("org.grails:grails-core")
  implementation("org.grails:grails-logging")

  implementation("org.grails:grails-plugin-codecs")
  implementation("org.grails:grails-plugin-databinding")
  implementation("org.grails:grails-plugin-datasource")
  implementation("org.grails:grails-plugin-i18n")
  implementation("org.grails:grails-plugin-interceptors")
  implementation("org.grails:grails-plugin-rest")
  implementation("org.grails:grails-plugin-services")
  implementation("org.grails:grails-plugin-url-mappings")

  implementation("org.grails:grails-web-boot")
	
	implementation("org.grails.plugins:async")
  implementation("org.grails.plugins:events")
  implementation("org.grails.plugins:hibernate5")
  implementation("org.grails.plugins:spring-security-core:6.1.1") /* { // NOT IN LINE WITH GRAILS PATCH VERSION
    exclude group: 'org.springframework.security', module: 'spring-security-core'
  }  */
  // 5.8.9 affected by https://security.snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKSECURITY-6457293
  implementation("org.springframework.security:spring-security-core:5.8.11")
  
  implementation("org.grails.plugins:views-json")
  implementation("org.grails.plugins:views-json-templates")
  implementation("org.hibernate:hibernate-core:5.6.15.Final")

  //runtimeOnly("com.h2database:h2")
  runtimeOnly("javax.xml.bind:jaxb-api:2.3.1")
  //runtimeOnly("org.apache.tomcat:tomcat-jdbc")
  //runtimeOnly("org.glassfish.web:el-impl:2.2.1-b05")

  testImplementation("io.micronaut:micronaut-inject-groovy")
  testImplementation("org.grails:grails-gorm-testing-support")
  testImplementation("org.mockito:mockito-core")
	testImplementation "org.grails:grails-web-testing-support"

  //testImplementation("org.grails:views-json-testing-support")
  //testImplementation("org.spockframework:spock-core")
  //testImplementation("io.micronaut:micronaut-http-client")

  /*  ---- Manually installed dependencies ---- */
	implementation 'com.k_int.grails:web-toolkit-ce:10.1.0'
	implementation('com.k_int.okapi:grails-okapi:7.4.0') {
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }

  implementation 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'
  implementation 'org.codehaus.janino:janino:3.1.9'
  implementation "org.springframework.boot:spring-boot-starter-undertow" // Replaces spring-boot-starter-tomcat
  implementation "org.hibernate:hibernate-java8"
  runtimeOnly "com.zaxxer:HikariCP:5.1.0"                             // Replaces Tomcat JDBC pool
  runtimeOnly "org.postgresql:postgresql:42.7.3"
  implementation ('org.grails.plugins:database-migration:4.2.1') {
      exclude group: 'org.liquibase', module: 'liquibase-core'
  }
  implementation 'org.liquibase:liquibase-core:4.19.0'


  implementation 'com.opencsv:opencsv:5.7.1'
  implementation 'commons-io:commons-io:2.7'
  // Grails 5 and up no longer supports groovy files for logback config
  implementation('io.github.virtualdogbert:logback-groovy-config:1.14.1')
  compileOnly 'ch.qos.logback:logback-classic:1.4.7'
  // Is on runtime classpath via spring-boot-starter
  runtimeOnly 'ch.qos.logback:logback-classic:1.2.13'

  implementation 'uk.co.cacoethes:groovy-handlebars-engine:0.2'
  implementation 'com.github.jknack:handlebars-helpers:4.3.1'

  implementation 'com.github.zafarkhaja:java-semver:0.9.0'
  implementation 'org.z3950.zing:cql-java:1.13'

  // Minio for file storage to S3
  implementation "io.minio:minio:8.5.1"
  implementation 'com.squareup.okhttp3:okhttp:4.10.0'
  implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.10'

	/*  ---- Manually installed testing dependencies ---- */
	//implementation "org.grails:grails-gorm-testing-support:2.6.1"
	//implementation "org.grails:grails-web-testing-support:2.6.1"
	testImplementation "org.grails.plugins:geb"
	testImplementation "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
	testImplementation "org.seleniumhq.selenium:selenium-api:3.14.0"
	testImplementation "org.seleniumhq.selenium:selenium-support:3.14.0"
	implementation "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
	implementation "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"

	/* ---- Custom non profile deps ---- */
	implementation 'org.apache.kafka:kafka-clients:3.7.0'
	implementation 'com.github.everit-org.json-schema:org.everit.json.schema:1.14.4'
	// Better test reports.
	testImplementation( 'com.athaydes:spock-reports:2.3.2-groovy-3.0' ) {
		transitive = false // this avoids affecting your version of Groovy/Spock
	}
}
/* 
application {
    mainClass.set("mod.agreements.Application")
} */

/* java {
    sourceCompatibility = JavaVersion.toVersion("11")
} */

tasks.withType(Test) {
    useJUnitPlatform()
}

bootRun {
	ignoreExitValue true
	jvmArgs(
    '-Dspring.output.ansi.enabled=always',
    '-noverify',
    '-XX:TieredStopAtLevel=1',
    '-Xmx1592m')
	sourceResources sourceSets.main
	String springProfilesActive = 'spring.profiles.active'
	systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

integrationTest {
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	jvmArgs(
    '-Xmx1592m',
    '-XX:ReservedCodeCacheSize=256m'
  )
}

project.gradle.projectsEvaluated {
  task generateDescriptors(type: Copy) {

    dependsOn buildProperties

    File grailsBuildInfoFile = buildProperties.outputs.files.files.find { it.name == 'grails.build.info' }

    final def props = [:]

    if(!(grailsBuildInfoFile)) return // No need to continue if the file is not there

    doFirst {

      // Place the loading within a do first as the info file from the buildProperties
      // task will not be present until it is executed. This owuld cause a file not found
      // during task configureation otherwise.
      Properties properties = new Properties()

      // Read properties from the file
      grailsBuildInfoFile.withInputStream {
        properties.load(it)
      }

      // Need to parse multi-dimensional keys.
      ConfigSlurper cs = new ConfigSlurper()
      //println("LOGDEBUG CS: ${cs.parse(properties)}")
      props.putAll(cs.parse(properties))
    }

    from ('./src/main/okapi') {
      include '*-template.json'
    }
    into './build/resources/main/okapi'
    filteringCharset = 'UTF-8'
    expand(props)
    rename { String fileName ->
      fileName.replace('-template', '')
    }
  }

  buildProperties.doLast {

    // Find the right file
    File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }

    if(!grailsBuildInfoFile) return // No need to continue if the file is not there
      Properties properties = new Properties()

    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
      properties.load(it)
    }

    // Load the app version
    String version = properties.getProperty('info.app.version')
    def versionParts
    if (version && (versionParts = version =~ version_regex)) {
      versionParts[0].with {
        properties.setProperty('info.app.majorVersion', it[3])
        properties.setProperty('info.app.minorVersion', it[2])
        properties.setProperty('info.app.patchVersion', it[1])

        if (it[5]) {
          properties.setProperty('info.app.testVersion', it[5])
        }
      }
      version.replaceAll(/^(((\d+)\.\d+)\.\d+)(-([\w]+))?$/ , '$1')
    }

    // Add new properties from various sources
    properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))

    // Get a System property
    properties.setProperty('build.java.version', System.getProperty('java.version'))

    properties.setProperty('okapiInterfaceVersion', "$okapiInterfaceVersion")


    // Write the properties back to the file
    grailsBuildInfoFile.withOutputStream {
      properties.store(it,null)
    }
  }
  processResources.dependsOn generateDescriptors
}


tasks.withType(GroovyCompile) {
	configure(groovyOptions) {
		forkOptions.jvmArgs = ['-Xmx1024m']
	}
}

tasks.named('bootJarMainClassName') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('compileIntegrationTestGroovy') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('test') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('integrationTest') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('mergeTestReports') { it.mustRunAfter(tasks.named('test')) }
tasks.named('compileTestGroovy') { it.mustRunAfter(tasks.named('compileGsonViews')) }

tasks.withType(Test) {
	useJUnitPlatform()
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
  systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

/**
 * Docker build config.
 */
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

ext {
  dockerId = "${project.dockerRepo}/${project.name}:${project.version}${dockerTagSuffix}"
  dockerBuildDir = mkdir("${buildDir}/docker")
}

task prepareDocker(type: Copy, dependsOn: assemble) {
  description = 'Copy files to build directory'
  group = 'Docker'

  from project.bootJar

  // from otherfileLoc

  into dockerBuildDir
}

task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
  description = 'Create a Dockerfile file'
  group = 'Docker'

  destFile = project.file("${dockerBuildDir}/Dockerfile")

  from 'folioci/alpine-jre-openjdk17:latest'
  instruction 'LABEL maintainer="Knowledge Integration"'

  exposePort 8080

  // Copying straight into the default directory should be enough
  copyFile bootJar.archiveName, '/usr/verticles/application.jar'
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
  description = 'Create Docker image to run the Grails application'
  group = 'Docker'

  inputDir = file(dockerBuildDir)
  images.add(dockerId)
}

eclipse {
	autoBuildTasks ([
		':processResources'
	])
	synchronizationTasks ([
		':processResources'
	])

	classpath {
		defaultOutputDir = new File(project.buildDir.canonicalPath, 'main')
		file {

			whenMerged { classpath ->

				Set<String> resources = sourceSets.main?.resources?.srcDirs?.collect { it.canonicalPath }

				entries.collect().each {

					if (it.path =='grails-app/conf' && it.output?.toLowerCase().endsWith('test')) {
						classpath.entries.remove( it )
						println "Removed ${it}"
						return
					}

					if (it.hasProperty('output') && it.output.startsWith('bin/')) {
						it.output = 'build/' + it.output.substring(4)
					}

					// Eclude the output of the resources added to the source sets for grails.
					// Instead we add the results of the 'processResources' tasks to the classpath later.
					if (it.hasProperty('dir') && resources.find { res -> it.dir?.canonicalPath?.startsWith(res) } ) {
						it.exported = false
						it.excludes << '**/*'
					}
				}
				def lib = new org.gradle.plugins.ide.eclipse.model.Library(fileReference(file("${tasks.processResources.destinationDir}")))
				println "Adding: ${lib}"
				entries << lib
			}
		}
	}
}
