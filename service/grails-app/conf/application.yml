---
grails:
  profile: rest-api
  codegen:
    defaultPackage: org.olf
  gorm:
    reactor:
      # Whether to translate GORM events into Reactor events
      # Disabled by default for performance reasons
      events: false
info:
  app:
    name: '@info.app.name@'
    version: '@info.app.version@'
    grailsVersion: '@info.app.grailsVersion@'
spring:
  jmx:
    unique-names: true
  main:
    banner-mode: "off"
  groovy:
    template:
      check-template-location: false
  devtools:
    restart:
      additional-exclude:
        - '*.gsp'
        - '**/*.gsp'
        - '*.gson'
        - '**/*.gson'
        - 'logback.groovy'
        - '*.properties'
---
grails:
  mime:
    disable:
      accept:
        header:
          userAgents:
            - Gecko
            - WebKit
            - Presto
            - Trident
    types:
      json:
       - application/json
       - text/json
      hal:
       - application/hal+json
       - application/hal+xml
      xml:
       - text/xml
       - application/xml
      atom: application/atom+xml
      css: text/css
      csv: text/csv
      js: text/javascript
      rss: application/rss+xml
      text: text/plain
      all: '*/*'
  urlmapping:
    cache:
      maxsize: 1000
  controllers:
    defaultScope: singleton
  converters:
    encoding: UTF-8
    gson:
      domain:
        include:
          version: true
    domain:
      include:
        version: true
---
#### Place _ALL_ app specifics here. Makes it easier to migrate. ####

# Datasource used by default.
dataSource:
  logSql: false
  pooled: true
  jmxExport: false
  dbCreate: none
  username: "${db.username:folio}"
  password: "${db.password:folio}"
  driverClassName: org.postgresql.Driver
  dialect: com.k_int.hibernate.dialects.postgres.KIPostgres94Dialect
  url: "jdbc:postgresql://${db.host:localhost}:${db.port:5432}/${db.database:olfdev}?ApplicationName=${okapi.schema.appName}"
  hikari:
    data-source-properties:
      ApplicationName: "${okapi.schema.appName}"
  schemaHandler: com.k_int.okapi.OkapiSchemaHandler

  properties:
    jmxEnabled: false
    maximumPoolSize: ${db.maxpoolsize:10}
    transactionIsolation: TRANSACTION_READ_COMMITTED

grails:
  mime:
    types:
      kbart: 'text/tab-separated-value;charset=UTF-8'  # KBART mime type.
  controllers:
    upload:
      maxFileSize: 209715200
      maxRequestSize: 220200960

  gorm:
    multiTenancy:
      mode: SCHEMA
      tenantResolverClass: com.k_int.okapi.OkapiTenantResolver  # From grails-okapi plugin.

  plugin:
    springsecurity:
      providerNames:
        - 'okapiAuthenticationProvider'   # From grails-okapi plugin.

      controllerAnnotations:
        staticRules:
          -
            pattern: '/okapi/**'
            access:
              - 'permitAll' # Should maybe lock this down to the Super tenant once it is properly enforced?
          -
            pattern: '/application/**'
            access:
              - 'permitAll'
          -
            pattern: '/**'
            access:
              - 'permitAll'
        filterChain:
          chainMap:
            -
              pattern: '/**'
              filters: 'JOINED_FILTERS,-securityContextPersistenceFilter,-rememberMeAuthenticationFilter,-basicAuthenticationFilter'
  databinding:
    dateFormats:
      - "yyyy-MM-dd'T'HH:mm:ssX"
      - "yyyy-MM-dd'T'HH:mm:ss.SSSX"
      - "yyyy-MM-dd'T'HH:mm:ss'Z'"
      - "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
      - "yyyy-MM-dd'T'HH:mm:ss"
      - "yyyy-MM-dd'T'HH:mm:ss.SSS"
      - 'yyyy-MM-dd'

  views:
    json:
      generator:
        timeZone: "UTC"
        dateFormat: "yyyy-MM-dd'T'HH:mm:ssX"

hibernate:
 # format_sql: true
  cache:
    queries: false
    use_second_level_cache: false
    use_query_cache: false

  allow_update_outside_transaction: true #TODO: We should remove this in the near future and fix all dependants to wrap transactions.
  enable_lazy_load_no_trans: true

management:
  endpoints:
    enabled-by-default: false
    web:
      base-path: '/admin'
      exposure:
        include:
          - health
          - info
  endpoint:
    info:
      enabled: true
    health:
      enabled: true
      
  health:
     datasource:
        enabled: true
     defaults:
        enabled: false

okapi:
  linkListener:
    allowedControllerActions:
      subscriptionAgreement:
        - show
        - update
        - save
        - create
        - publicLookup
        - export


  schema:
    appName: 'mod-agreements'
  service:
    register: false
    deploy: false

webtoolkit:
  converters:
    numbers:
      fixedLocale: true # Can be a boolean for default locale or an IETF BCP 47 language string
endpoints:
  include-stack-trace: false

concurrentJobsGlobal: "${CONCURRENT_JOBS_GLOBAL:3}"

# Environment specific overrides.
environments:
  test:
    dataSource:
      url: "jdbc:postgresql://${db.host:localhost}:${db.port:5432}/${db.database:okapi_modules_test}?ApplicationName=${okapi.schema.appName}"
      hikari:
        data-source-properties:
          ApplicationName: "${okapi.schema.appName}"
    kiwt:
      # Filestore values from the minio config defined in the docker-compose file at ../tools/testing
      filestore:
        aws_region: "us-east-1"
        aws_url: "http://localhost:9000"
        aws_secret: "DIKU_AGG_SECRET_KEY"
        aws_bucket: "diku-shared"
        aws_access_key_id: "DIKU_AGG_ACCESS_KEY"

  dbGen:
    grails:
      gorm:
        multiTenancy:
          mode: SCHEMA
          tenantResolverClass: org.grails.datastore.mapping.multitenancy.resolvers.SystemPropertyTenantResolver # System prop of gorm.tenantId
      plugin:
        databasemigration:
          changelogFileName: module-tenant-changelog.groovy
    gorm:
      tenantId: public # Used by SystemPropertyTenantResolver

  production:
    dataSource:
      url: "jdbc:postgresql://${db.host:localhost}:${db.port:5432}/${db.database:olf}?ApplicationName=${okapi.schema.appName}"
      hikari:
        data-source-properties:
          ApplicationName: "${okapi.schema.appName}"
    kiwt:
      filestore:
        aws_region: "${aws.region:us-east-1}"
        aws_url: "${aws.url:}"
        aws_secret: "${aws.secret.access.key:}"
        aws_bucket: "${aws.bucket:none}"
        aws_access_key_id: "${aws.access.key.id:none}"

  development:
    logging:
      config: classpath:logback-development.xml
      level:
        web: DEBUG
    kiwt:
      # Filestore values from the minio config defined in the docker-compose file at ../tools/testing
      filestore:
        aws_region: "us-east-1"
        aws_url: "http://localhost:9000"
        aws_secret: "DIKU_AGG_SECRET_KEY"
        aws_bucket: "diku-shared"
        aws_access_key_id: "DIKU_AGG_ACCESS_KEY"
    # This is only used when the there is no request from okapi coming to the module or a none-okapi request.
    # OKAPI supplies information about how to reach it to the modules. These options are used for self reg and other calls
    # when the request did not come through OKAPI.
    okapi:
      service:
        host: localhost
        port: 9130


